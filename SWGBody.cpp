/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGBody.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGBody::SWGBody(QString* json) {
    init();
    this->fromJson(*json);
}

SWGBody::SWGBody() {
    init();
}

SWGBody::~SWGBody() {
    this->cleanup();
}

void
SWGBody::init() {
    list = new QString("");
    count = 0;
    page = 0;
    where_type = new QString("");
    where = new QList<SWGWhereItem*>();
    order = new SWGList_order();
}

void
SWGBody::cleanup() {
    
    if(list != nullptr) {
        delete list;
    }



    if(where_type != nullptr) {
        delete where_type;
    }

    if(where != nullptr) {
        QList<SWGWhereItem*>* arr = where;
        foreach(SWGWhereItem* o, *arr) {
            delete o;
        }
        delete where;
    }

    if(order != nullptr) {
        delete order;
    }
}

SWGBody*
SWGBody::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGBody::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&list, pJson["list"], "QString", "QString");
    ::Swagger::setValue(&count, pJson["count"], "qint32", "");
    ::Swagger::setValue(&page, pJson["page"], "qint32", "");
    ::Swagger::setValue(&where_type, pJson["whereType"], "QString", "QString");
    
    ::Swagger::setValue(&where, pJson["where"], "QList", "SWGWhereItem");
    
    ::Swagger::setValue(&order, pJson["order"], "SWGList_order", "SWGList_order");
}

QString
SWGBody::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGBody::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("list"), list, obj, QString("QString"));

    obj->insert("count", QJsonValue(count));

    obj->insert("page", QJsonValue(page));

    toJsonValue(QString("whereType"), where_type, obj, QString("QString"));

    QJsonArray whereJsonArray;
    toJsonArray((QList<void*>*)where, &whereJsonArray, "where", "SWGWhereItem");
    obj->insert("where", whereJsonArray);

    toJsonValue(QString("order"), order, obj, QString("SWGList_order"));

    return obj;
}

QString*
SWGBody::getList() {
    return list;
}
void
SWGBody::setList(QString* list) {
    this->list = list;
}

qint32
SWGBody::getCount() {
    return count;
}
void
SWGBody::setCount(qint32 count) {
    this->count = count;
}

qint32
SWGBody::getPage() {
    return page;
}
void
SWGBody::setPage(qint32 page) {
    this->page = page;
}

QString*
SWGBody::getWhereType() {
    return where_type;
}
void
SWGBody::setWhereType(QString* where_type) {
    this->where_type = where_type;
}

QList<SWGWhereItem*>*
SWGBody::getWhere() {
    return where;
}
void
SWGBody::setWhere(QList<SWGWhereItem*>* where) {
    this->where = where;
}

SWGList_order*
SWGBody::getOrder() {
    return order;
}
void
SWGBody::setOrder(SWGList_order* order) {
    this->order = order;
}



} /* namespace Swagger */

