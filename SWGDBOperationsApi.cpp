/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGDBOperationsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGDBOperationsApi::SWGDBOperationsApi() {}

SWGDBOperationsApi::~SWGDBOperationsApi() {}

SWGDBOperationsApi::SWGDBOperationsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGDBOperationsApi::addPost(QString* api_key, QString* access_token, QString* list, QString* body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/Add");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = body.asJson();
    input.request_body.append(output);
    

    // TODO: add header support
    // TODO: add header support
    // TODO: add header support

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDBOperationsApi::addPostCallback);

    worker->execute(&input);
}

void
SWGDBOperationsApi::addPostCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGAddResponse* output = static_cast<SWGAddResponse*>(create(json, QString("SWGAddResponse")));
    

    worker->deleteLater();

    emit addPostSignal(output);
    
}
void
SWGDBOperationsApi::listPost(QString* api_key, QString* access_token, QString* list, SWGBody body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/List");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = body.asJson();
    input.request_body.append(output);
    

    // TODO: add header support
    // TODO: add header support
    // TODO: add header support

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDBOperationsApi::listPostCallback);

    worker->execute(&input);
}

void
SWGDBOperationsApi::listPostCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    

    worker->deleteLater();

    
    emit listPostSignal();
}
void
SWGDBOperationsApi::setDelete(QString* api_key, QString* access_token, QString* list, QString* list_item_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/Set");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");

    


    // TODO: add header support
    // TODO: add header support
    // TODO: add header support
    // TODO: add header support

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDBOperationsApi::setDeleteCallback);

    worker->execute(&input);
}

void
SWGDBOperationsApi::setDeleteCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGSetResponse* output = static_cast<SWGSetResponse*>(create(json, QString("SWGSetResponse")));
    

    worker->deleteLater();

    emit setDeleteSignal(output);
    
}
void
SWGDBOperationsApi::setPost(QString* api_key, QString* access_token, QString* list, QString* list_item_id, QString* body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/Set");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    
    QString output = body.asJson();
    input.request_body.append(output);
    

    // TODO: add header support
    // TODO: add header support
    // TODO: add header support
    // TODO: add header support

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDBOperationsApi::setPostCallback);

    worker->execute(&input);
}

void
SWGDBOperationsApi::setPostCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGSetResponse* output = static_cast<SWGSetResponse*>(create(json, QString("SWGSetResponse")));
    

    worker->deleteLater();

    emit setPostSignal(output);
    
}
} /* namespace Swagger */
